name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cache_nonce: [ 0 ] # Allows for easily busting actions/cache caches
        target:
          - os: linux
            cpu: amd64
          # - os: linux
          #   cpu: i386
          - os: macos
            cpu: amd64
          - os: windows
            cpu: amd64
          # - os: windows
          #   cpu: i386
        nim_branch: [version-1-2, version-1-6]
        cov_branch: [version-1-6]
        include:
          - target:
              os: linux
            builder: ubuntu-latest
            shell: bash --noprofile --norc -e -o pipefail
          - target:
              os: macos
            builder: macos-latest
            shell: bash --noprofile --norc -e -o pipefail
          - target:
              os: windows
            builder: windows-latest
            shell: msys2

    defaults:
      run:
        shell: ${{ matrix.shell }} {0}

    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (Nim ${{ matrix.nim_branch }})'
    runs-on: ${{ matrix.builder }}
    timeout-minutes: 80
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Nimbus Build System
        uses: ./.github/actions/nimbus-build-system
        with:
          os: ${{ matrix.target.os }}
          cpu: ${{ matrix.target.cpu }}
          nim_branch: ${{ matrix.nim_branch }}
          shell: ${{ matrix.shell }}
          cache_nonce: ${{ matrix.cache_nonce }}

      - name: Start Ethereum node with Codex contracts
        working-directory: vendor/dagger-contracts
        run: |
          if [[ '${{ matrix.os }}' == 'windows' ]]; then
            export PATH="${PATH}:/c/program files/nodejs"
          fi
          npm install
          npm start &

      - name: Build and run Codex tests
        run: |
          make -j${ncpu} NIM_COMMIT="${{ matrix.nim_branch }}" testAll
          echo
          if [[ '${{ runner.os }}' == macOS ]]; then
            echo otool -L build/codex
            otool -L build/codex
          elif [[ '${{ runner.os }}' == 'Windows' ]]; then
            echo ntldd build/codex
            ntldd build/codex
          else
            echo ldd build/codex
            ldd build/codex
          fi

      - name: Generate coverage data (Linux amd64, Nim ${{ matrix.cov_branch }})
        if: runner.os == 'Linux' && matrix.target.cpu == 'amd64' && matrix.nim_branch == matrix.cov_branch
        run: |
          rm -rf build nimcache
          make -j${ncpu} NIM_COMMIT="${{ matrix.nim_branch }}" coverage

      - name: Upload coverage data to Codecov (Linux amd64, Nim ${{ matrix.cov_branch }})
        if: runner.os == 'Linux' && matrix.target.cpu == 'amd64' && matrix.nim_branch == matrix.cov_branch
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
          fail_ci_if_error: true
          files: ./coverage/coverage.f.info
          flags: unittests
          name: codecov-umbrella
          verbose: true
